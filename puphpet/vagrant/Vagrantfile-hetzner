# -*- mode: ruby -*-
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'managed'

provider = data['vm']['provider']['hetzner']
machines = !provider['machines'].empty? ? provider['machines'] : { }

# print "#{provider}"

machines.each do |i, machine|

  ssh_username = !machine['ssh']['username'].nil? ?
    machine['ssh']['username'] :
    'vagrant'

  config.trigger.before :up  do
    run "#{dir}/puphpet/shell/addVagrantUser.sh #{ssh_username} #{machine['iphost']} #{machine['ssh']['port']} #{machine['startuser']} #{machine['ssh']['private_key_path']}"
  end

  config.vm.define "#{machine['id']}" do |machine_id|
    machine_id.vm.box         = "#{provider['box']}"

    machine_id.vm.synced_folder ".", "/vagrant", disabled: true
    machine_id.vm.synced_folder "./puphpet", "/vagrant/puphpet",owner: "root", group: "root"

    # machine_id.ssh.private_key_path = "#{machine['ssh']['private_key_path']}"

    machine_id.vm.provider :managed do |managed, override|
      managed.server = "#{machine['iphost']}"
      #managed.server = "ec2-54-69-254-197.us-west-2.compute.amazonaws.com"
    end


    if machine['hostname'].to_s.strip.length != 0
      machine_id.vm.hostname = "#{machine['hostname']}"
    end

    machine_id.vm.provision :shell,
      :inline => "sed -i -e 's/\r$//' /vagrant/puphpet/shell/*.sh"
    
    machine_id.vm.provision 'shell' do |s|
      s.path = 'puphpet/shell/initial-setup.sh'
      s.args = '/vagrant/puphpet'
    end
    machine_id.vm.provision 'shell' do |s|
      s.path = 'puphpet/shell/install-puppet.sh'
    end
    machine_id.vm.provision :shell do |s|
      s.path = 'puphpet/shell/execute-files.sh'
      s.args = ['exec-preprovision',"#{machine_id.vm.hostname}"]
    end
    
    machine_id.vm.provision :puppet do |puppet|
      puppet.facter = {
        'fqdn'             => "#{machine_id.vm.hostname}",
        'ssh_username'     => "#{ssh_username}",
        'provisioner_type' => 'hetzner',
        'machine_id' => "#{i}",
      }
      puppet.manifests_path = "#{data['vm']['provision']['puppet']['manifests_path']}"
      puppet.manifest_file  = ""
      puppet.module_path    = "#{data['vm']['provision']['puppet']['module_path']}"

      if !data['vm']['provision']['puppet']['options'].empty?
        puppet.options = data['vm']['provision']['puppet']['options']
      end
    end

    machine_id.vm.provision :shell do |s|
      s.path = 'puphpet/shell/execute-files.sh'
      s.args = ['exec-once', 'exec-always', "#{machine_id.vm.hostname}"]
    end
    machine_id.vm.provision :shell, run: 'always' do |s|
      s.path = 'puphpet/shell/execute-files.sh'
      s.args = ['startup-once', 'startup-always', "#{machine_id.vm.hostname}"]
    end

    machine_id.vm.provision :shell, privileged: false do |s|
      s.path = 'puphpet/shell/execute-files.sh'
      s.args = ['exec-once-unprivileged', 'exec-always-unprivileged', "#{machine_id.vm.hostname}"]
    end
    machine_id.vm.provision :shell, run: 'always', privileged: false do |s|
      s.path = 'puphpet/shell/execute-files.sh'
      s.args = ['startup-once-unprivileged', 'startup-always-unprivileged', "#{machine_id.vm.hostname}"]
    end

    machine_id.vm.provision :shell, :path => 'puphpet/shell/important-notices.sh'

    machine_id.ssh.username         = "#{ssh_username}"

    if !machine['ssh']['private_key_path'].nil?
        machine_id.ssh.private_key_path = "#{machine['ssh']['private_key_path']}"
    end

    if !machine['ssh']['port'].nil?
      machine_id.ssh.port = "#{machine['ssh']['port']}"
    end

    if !machine['ssh']['shell'].nil?
      machine_id.ssh.shell = "#{machine['ssh']['shell']}"
    end

    if !machine['ssh']['keep_alive'].nil?
      machine_id.ssh.keep_alive = machine['ssh']['keep_alive'].to_bool
    end
    if !machine['ssh']['forward_agent'].nil?
      machine_id.ssh.forward_agent = machine['ssh']['forward_agent'].to_bool
    end
    if !machine['ssh']['forward_x11'].nil?
      machine_id.ssh.forward_x11 = machine['ssh']['forward_x11'].to_bool
    end

    # print "SSH Values:  #{machine_id.ssh.private_key_path}"
  end
end
