#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 862)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'75,77,282,-282,60,70,144,71,262,114,-142,337,293,167,449,439,448,144',
'464,-280,438,-277,400,116,20,119,403,113,115,147,51,283,54,294,66,12',
'-268,58,43,46,147,53,44,10,11,-282,168,61,19,118,263,45,-142,338,17',
'18,-143,98,99,101,100,-280,82,-277,96,97,75,77,52,398,169,95,42,78,397',
'80,81,79,-268,-144,59,48,67,68,62,63,64,65,55,-183,-183,57,75,77,69',
'144,60,70,-143,71,102,114,-141,438,314,406,449,315,448,-180,-180,388',
'453,134,135,116,20,119,147,113,115,-144,51,372,54,389,66,137,407,58',
'43,46,293,53,44,-184,-184,134,135,61,19,118,293,45,-141,296,17,18,293',
'98,99,101,100,294,82,409,96,97,-185,-185,52,296,385,95,42,78,274,80',
'81,294,94,-139,59,48,67,68,62,63,64,65,55,-182,-182,57,75,77,69,384',
'60,70,-222,71,102,114,318,317,-185,-185,-184,-184,-183,-183,-181,-181',
'329,330,415,116,20,119,126,113,115,-139,51,384,54,417,66,12,276,58,43',
'46,84,53,44,10,11,-179,-179,61,19,118,94,45,-182,-182,17,18,264,132',
'380,101,100,125,82,86,96,97,-179,-179,52,127,126,95,42,78,424,80,81',
'293,425,197,59,48,67,68,62,63,64,65,55,335,296,57,75,77,69,336,60,70',
'294,71,102,132,293,428,194,125,128,129,130,131,277,431,286,127,126,296',
'20,122,150,384,280,150,51,294,54,376,66,12,192,58,43,46,440,53,44,10',
'11,327,441,61,19,442,443,45,281,132,17,18,374,125,128,129,130,131,82',
'371,446,127,367,450,52,452,365,364,42,78,285,80,81,343,274,461,59,48',
'67,68,62,63,64,65,55,274,308,57,75,77,69,399,60,70,309,71,496,335,128',
'129,130,131,274,159,159,312,468,312,316,470,126,335,20,151,473,335,126',
'150,51,94,54,86,66,12,335,58,43,46,94,53,44,10,11,478,452,61,19,480',
'481,45,482,132,17,18,483,125,335,132,94,487,82,125,488,127,434,489,52',
'490,491,127,42,78,492,80,81,94,94,86,59,48,67,68,62,63,64,65,55,500',
'501,57,75,77,69,83,60,70,503,71,494,114,128,129,130,131,504,505,128',
'129,130,131,367,,,116,20,119,126,113,115,,51,,54,,66,12,,58,43,46,,53',
'44,10,11,,,61,19,118,,45,,,17,18,,132,,101,100,125,82,,96,97,,,52,127',
',95,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70',
',71,102,,336,,,,128,129,130,131,,,,126,,,20,,,-267,126,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,132,,17,18,125,,,132,,,82,125,127,,',
',52,-267,,127,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77',
'69,,60,70,,71,,128,129,130,131,,,,128,129,130,131,,126,,,20,,126,,,',
'51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,132,,17,18,125,132',
',,,125,82,,127,,,,52,127,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55',
',,57,75,77,69,,60,70,,71,,128,129,130,131,,128,129,130,131,,,,126,,',
'20,,126,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,132,,17',
'18,125,132,,,,125,82,,127,,,,52,127,,,42,78,,80,81,,,,59,48,67,68,62',
'63,64,65,55,,,57,75,77,69,,60,70,,71,486,128,129,130,131,,128,129,130',
'131,,,,126,,,20,,126,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19',
',,45,132,,17,18,125,132,,,,125,82,,127,,,,52,127,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,128,129,130,131,,128',
'129,130,131,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,75,77,,,169,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,114,167,,,164,,,,75,77,,,169',
',116,20,119,,113,115,,51,,54,82,66,137,,58,43,46,,53,44,168,78,,,61',
'19,118,,45,,,17,18,167,,,164,,,82,75,77,,,169,52,,,95,42,78,,80,81,',
',82,59,48,67,68,62,63,64,65,55,168,78,57,75,77,69,,60,70,,71,,114,167',
',,164,,,,75,77,,,169,,116,20,119,,113,115,,51,,54,82,66,137,,58,43,46',
',53,44,168,78,,,61,19,118,,45,,,17,18,167,,,164,,,82,,96,97,,,52,,,95',
'42,78,,80,81,,,82,59,48,67,68,62,63,64,65,55,168,78,57,75,77,69,114',
'60,70,,71,,114,,,,,,,,116,,119,,113,115,116,20,119,,113,115,,51,,54',
',66,137,,58,43,46,,53,44,118,,,,61,19,118,,45,,,17,18,,,96,97,,,82,',
',95,,,52,,,95,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77',
'69,,60,70,,71,,114,,,,,,,,,,,,,,116,20,119,,113,115,,51,,54,,66,12,',
'58,43,46,,53,44,10,11,,,61,19,118,,45,,,17,18,87,88,89,,,,82,,96,97',
',,52,,,95,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,',
'60,70,,71,185,114,,,,90,92,91,93,,,,,,,116,20,119,,113,115,,51,,54,',
'66,12,,58,43,46,,53,44,10,11,,,61,19,118,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,174,171,67,68,62,63,64,65,172,181,180,173,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,143,,,,,51,,54,,66,12,,58,43,46,,53,44',
'10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48',
'67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,114,,,,,,,,,,,,,,116',
'20,119,,113,115,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,118,,45',
',,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65',
'55,,,57,75,77,69,114,60,70,,71,,114,,,,,,,,116,,119,,113,115,116,20',
'119,,113,115,,51,,54,,66,137,,58,43,46,,53,44,118,,,,61,19,118,,45,',
',17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55',
',,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43',
'46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81',
',,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,',
',,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,',
',,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75',
'77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53',
'44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48',
'67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,',
',,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,',
',,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60',
'70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61',
'19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63',
'64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66',
'137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78',
',80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,',
',,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45',
',,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65',
'55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,',
'58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,306,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43',
'46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81',
',,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,',
',,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46',
',53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,',
',,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,',
',,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,454,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43',
'46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,',
',59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,',
',20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,',
',,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75',
'77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53',
'44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48',
'67,68,62,63,64,65,55,,,57,75,77,69,,60,70,176,71,,,,,,,,,,,,,,,,,20',
',,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,',
',82,,,,,,52,,,,42,78,,80,81,,,,174,171,67,68,62,63,64,65,172,181,180',
'173,75,77,69,,60,70,183,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58',
'43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,174,171,67,68,62,63,64,65,172,181,180,173,75,77,69,,60,70,,71',
'185,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61',
'19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,174,171,67,68,62',
'63,64,65,172,181,180,173,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,',
',51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82',
',,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,',
',,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,',
'54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'196,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,',
'57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43',
'46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,',
',59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,',
',20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,',
',,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75',
'77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53',
'44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20',
',,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,',
',82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77',
'69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44',
'10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48',
'67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,',
',,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82',
',,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10',
'11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67',
'68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,',
',52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60',
'70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11',
',,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,214',
'232,224,233,66,226,235,227,43,212,,216,210,,,,,61,19,236,231,211,,,17',
'209,,,,,,,82,,,,,234,215,,,,42,78,,80,81,,,,228,213,229,230,219,220',
'221,222,225,237,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,',
'54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46',
',53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20',
',,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82',
',,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,',
',,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,',
'54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46',
',53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20',
',,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82',
',,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,',
',,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,',
'54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46',
',53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,259,42,78,,80,81,,',
',59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,',
',20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,',
',,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77',
'69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44',
',,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67',
'68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46',
',53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,',
',,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,',
',,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,',
',,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75',
'77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53',
'44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,174',
'171,67,68,62,63,64,65,172,181,180,173,75,77,69,,60,70,,71,410,,,,,,',
',,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,',
',17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,174,171,67,68,62,63,64,65',
'172,181,180,173,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,',
'66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,',
',,42,78,,80,81,,,,174,171,67,68,62,63,64,65,172,181,180,173,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,',
',,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,393,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,',
',52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60',
'70,,71,391,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10',
'11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67',
'68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,382,,,,,,,,,,,,,,,,20,,,',
',,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82',
',,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10',
'11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67',
'68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,298,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,',
',61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,',
'54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,',
'52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70',
',71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,114,,57,,,69,,,,,,,110,105,116,,119,,113,115,,106,108,107,109',
',,,,,,,,,,,,,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,,',
',95,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,,,,,,102,,',
'118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105',
'116,368,119,,113,115,,106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112,111',
',,98,99,101,100,103,104,,96,97,114,,299,,,95,,,,,,,110,105,116,,119',
',113,115,,106,108,107,109,,,,,,,,,,102,,,,,,118,,,,112,111,,,98,99,101',
'100,103,104,,96,97,114,,300,,,95,,,,,,,110,105,116,,119,,113,115,,106',
'108,107,109,,,,,,,,,,102,,,,,,118,,,,112,111,,,98,99,101,100,103,104',
',96,97,114,,301,,,95,,,,,,,110,105,116,,119,,113,115,,106,108,107,109',
',,,,,,,,,102,,,,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,',
',,,,95,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,,,,,,102',
',,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,339,,,95,,,,110',
'105,116,,119,,113,115,,106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112',
'111,,114,98,99,101,100,103,104,,96,97,,,110,105,116,95,119,,113,115',
',106,108,107,109,,,,,,,,,,,,,,,,118,,,,102,111,,,98,99,101,100,103,104',
'114,96,97,,,,,,95,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,',
',,,,,,,,102,,,118,,,,112,111,,114,98,99,101,100,103,104,,96,97,,,110',
'105,116,95,119,114,113,115,,106,108,107,109,,,,,,105,116,,119,,113,115',
',106,,118,,,,102,,,,98,99,101,100,103,104,,96,97,118,,,,,95,,114,98',
'99,101,100,103,104,,96,97,,,,105,116,95,119,114,113,115,,106,,,,,,102',
',,105,116,,119,,113,115,,106,,118,,,,102,,,,98,99,101,100,103,104,,96',
'97,118,,,,,95,,114,98,99,101,100,103,104,,96,97,,,,105,116,95,119,114',
'113,115,,106,,,,,,102,,,,116,,119,,113,115,,,,118,,,,102,114,,,98,99',
'101,100,103,104,,96,97,118,,116,,119,95,113,115,98,99,101,100,103,104',
',96,97,,,,,,95,,,,,,118,,,,,,102,,98,99,101,100,103,104,114,96,97,,',
',,,95,102,,,110,105,116,333,119,,113,115,,106,108,107,109,,,,,,,,,,',
',,102,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,',
'110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,,,,,,102,,,118,,,',
'112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119',
',113,115,,106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98,99,101',
'100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,115,,106,108',
'107,109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98,99,101,100,103,104,114',
'96,97,,,,,,95,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,',
',,,,102,,,118,,,,112,111,,,98,99,101,100,103,104,,96,97,,,,,,95,114',
',,,,,,,,,329,330,110,105,116,,119,,113,115,,106,108,107,109,,,,102,',
',,,,,,,,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,',
',,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,,,,,,102,,,118,',
',,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,',
'119,,113,115,,106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98',
'99,101,100,103,104,,96,97,,355,232,354,233,95,352,235,356,,345,,351',
'353,,,,,,,236,231,357,,,,350,,,,,,,,102,,,,234,358,,,,,,,,,,,,361,359',
'362,360,346,347,348,349,363,237,355,232,354,233,,352,235,356,,345,,351',
'353,,,,,,,236,231,357,,,,350,,,,,,,,,,,,234,358,,,,,,,,,,,,361,359,362',
'360,346,347,348,349,363,237,355,232,354,233,,352,235,356,,345,,351,353',
',,,,,,236,231,357,,,,350,,,,,,,,,,,,234,358,,,,,,,,,,,,361,359,362,360',
'346,347,348,349,363,237,355,232,354,233,,352,235,356,,345,,351,353,',
',,,,,236,231,357,,,,350,,,,,,,,,,,,234,358,,,,,,,,,,,,361,359,362,360',
'346,347,348,349,363,237,355,232,354,233,,352,235,356,,345,,351,353,',
',,,,,236,231,357,,,,350,,,,,,,,,,,,234,358,,,,,,,,,,,,361,359,362,360',
'346,347,348,349,363,237,355,232,354,233,,352,235,356,,345,,351,353,',
',,,,,236,231,357,,,,350,,,,,,,,,,,,234,358,,,,,,,,,,,,361,359,362,360',
'346,347,348,349,363,237' ]
        racc_action_table = arr = ::Array.new(10120, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,147,229,0,0,48,0,116,247,220,223,295,309,446,377,446,171,414,230',
'377,211,305,247,0,247,307,247,247,48,0,147,0,295,0,0,210,0,0,0,171,0',
'0,0,0,229,309,0,0,247,116,0,220,223,0,0,221,247,247,247,247,230,0,211',
'247,247,192,192,0,303,192,247,0,0,302,0,0,0,210,222,0,0,0,0,0,0,0,0',
'0,220,220,0,489,489,0,213,489,489,221,489,247,246,219,394,184,310,391',
'184,391,60,60,297,394,56,56,246,489,246,213,246,246,222,489,274,489',
'297,489,489,311,489,489,489,274,489,489,221,221,16,16,489,489,246,294',
'489,219,274,489,489,384,246,246,246,246,274,489,313,246,246,222,222',
'489,384,293,246,489,489,123,489,489,384,121,212,489,489,489,489,489',
'489,489,489,489,219,219,489,4,4,489,326,4,4,331,4,246,242,189,189,65',
'65,64,64,63,63,61,61,415,415,332,242,4,242,174,242,242,212,4,287,4,334',
'4,4,140,4,4,4,4,4,4,4,4,46,46,4,4,242,120,4,62,62,4,4,117,174,283,242',
'242,174,4,85,242,242,212,212,4,174,137,242,4,4,340,4,4,150,342,83,4',
'4,4,4,4,4,4,4,4,344,150,4,481,481,4,350,481,481,150,481,242,137,194',
'366,79,137,174,174,174,174,142,369,150,137,12,194,481,12,143,373,145',
'376,481,194,481,278,481,481,78,481,481,481,379,481,481,481,481,194,380',
'481,481,381,383,481,146,12,481,481,275,12,137,137,137,137,481,272,390',
'12,269,392,481,393,268,266,481,481,149,481,481,261,156,401,481,481,481',
'481,481,481,481,481,481,157,160,481,480,480,481,304,480,480,162,480',
'480,416,12,12,12,12,170,173,57,175,423,182,187,427,133,430,480,50,435',
'436,371,49,480,204,480,198,480,480,208,480,480,480,203,480,480,480,480',
'449,450,480,480,452,453,480,456,133,480,480,459,133,460,371,206,463',
'480,371,466,133,371,467,480,472,474,371,480,480,475,480,480,8,205,5',
'480,480,480,480,480,480,480,480,480,484,485,480,478,478,480,1,478,478',
'493,478,478,241,133,133,133,133,495,497,371,371,371,371,502,,,241,478',
'241,158,241,241,,478,,478,,478,478,,478,478,478,,478,478,478,478,,,478',
'478,241,,478,,,478,478,,158,,241,241,158,478,,241,241,,,478,158,,241',
'478,478,,478,478,,,,478,478,478,478,478,478,478,478,478,,,478,209,209',
'478,,209,209,,209,241,,209,,,,158,158,158,158,,,,226,,,209,,,226,59',
',209,,209,,209,209,,209,209,209,,209,209,,,,,209,209,,,209,226,,209',
'209,226,,,59,,,209,59,226,,,,209,226,,59,209,209,,209,209,,,,209,209',
'209,209,209,209,209,209,209,,,209,10,10,209,,10,10,,10,,226,226,226',
'226,,,,59,59,59,59,,224,,,10,,54,,,,10,,10,,10,10,,10,10,10,,10,10,10',
'10,,,10,10,,,10,224,,10,10,224,54,,,,54,10,,224,,,,10,54,,,10,10,,10',
'10,,,,10,10,10,10,10,10,10,10,10,,,10,11,11,10,,11,11,,11,,224,224,224',
'224,,54,54,54,54,,,,228,,,11,,225,,,,11,,11,,11,11,,11,11,11,,11,11',
'11,11,,,11,11,,,11,228,,11,11,228,225,,,,225,11,,228,,,,11,225,,,11',
'11,,11,11,,,,11,11,11,11,11,11,11,11,11,,,11,461,461,11,,461,461,,461',
'461,228,228,228,228,,225,225,225,225,,,,55,,,461,,172,,,,461,,461,,461',
'461,,461,461,461,,461,461,461,461,,,461,461,,,461,55,,461,461,55,172',
',,,172,461,,55,,,,461,172,,,461,461,,461,461,,,,461,461,461,461,461',
'461,461,461,461,,,461,448,448,461,,448,448,,448,,55,55,55,55,,172,172',
'172,172,,,,,,,448,,,,,,448,,448,,448,448,,448,448,448,,448,448,,,,,448',
'448,,,448,,,448,448,,,,,,,448,308,308,,,308,448,,,,448,448,,448,448',
',,,448,448,448,448,448,448,448,448,448,,,448,17,17,448,,17,17,,17,,239',
'308,,,308,,,,403,403,,,403,,239,17,239,,239,239,,17,,17,308,17,17,,17',
'17,17,,17,17,308,308,,,17,17,239,,17,,,17,17,403,,,403,,,17,227,227',
',,227,17,,,239,17,17,,17,17,,,403,17,17,17,17,17,17,17,17,17,403,403',
'17,18,18,17,,18,18,,18,,244,227,,,227,,,,58,58,,,58,,244,18,244,,244',
'244,,18,,18,227,18,18,,18,18,18,,18,18,227,227,,,18,18,244,,18,,,18',
'18,58,,,58,,,18,,244,244,,,18,,,244,18,18,,18,18,,,58,18,18,18,18,18',
'18,18,18,18,58,58,18,19,19,18,245,19,19,,19,,240,,,,,,,,245,,245,,245',
'245,240,19,240,,240,240,,19,,19,,19,19,,19,19,19,,19,19,245,,,,19,19',
'240,,19,,,19,19,,,245,245,,,19,,,245,,,19,,,240,19,19,,19,19,,,,19,19',
'19,19,19,19,19,19,19,,,19,20,20,19,,20,20,,20,,243,,,,,,,,,,,,,,243',
'20,243,,243,243,,20,,20,,20,20,,20,20,20,,20,20,20,20,,,20,20,243,,20',
',,20,20,7,7,7,,,,20,,243,243,,,20,,,243,20,20,,20,20,,,,20,20,20,20',
'20,20,20,20,20,,,20,196,196,20,,196,196,,196,196,136,,,,7,7,7,7,,,,',
',,136,196,136,,136,136,,196,,196,,196,196,,196,196,196,,196,196,196',
'196,,,196,196,136,,196,,,196,196,,,,,,,196,,,,,,196,,,,196,196,,196',
'196,,,,196,196,196,196,196,196,196,196,196,196,196,196,47,47,196,,47',
'47,,47,,,,,,,,,,,,,,,,,47,47,,,,,47,,47,,47,47,,47,47,47,,47,47,47,47',
',,47,47,,,47,,,47,47,,,,,,,47,,,,,,47,,,,47,47,,47,47,,,,47,47,47,47',
'47,47,47,47,47,,,47,441,441,47,,441,441,,441,,139,,,,,,,,,,,,,,139,441',
'139,,139,139,,441,,441,,441,441,,441,441,441,,441,441,441,441,,,441',
'441,139,,441,,,441,441,,,,,,,441,,,,,,441,,,,441,441,,441,441,,,,441',
'441,441,441,441,441,441,441,441,,,441,438,438,441,238,438,438,,438,',
'138,,,,,,,,238,,238,,238,238,138,438,138,,138,138,,438,,438,,438,438',
',438,438,438,,438,438,238,,,,438,438,138,,438,,,438,438,,,,,,,438,,',
',,,438,,,,438,438,,438,438,,,,438,438,438,438,438,438,438,438,438,,',
'438,431,431,438,,431,431,,431,,,,,,,,,,,,,,,,,431,,,,,,431,,431,,431',
'431,,431,431,431,,431,431,431,431,,,431,431,,,431,,,431,431,,,,,,,431',
',,,,,431,,,,431,431,,431,431,,,,431,431,431,431,431,431,431,431,431',
',,431,51,51,431,,51,51,,51,,,,,,,,,,,,,,,,,51,,,,,,51,,51,,51,51,,51',
'51,51,,51,51,,,,,51,51,,,51,,,51,51,,,,,,,51,,,,,,51,,,,51,51,,51,51',
',,,51,51,51,51,51,51,51,51,51,,,51,52,52,51,,52,52,,52,,,,,,,,,,,,,',
',,,52,,,,,,52,,52,,52,52,,52,52,52,,52,52,,,,,52,52,,,52,,,52,52,,,',
',,,52,,,,,,52,,,,52,52,,52,52,,,,52,52,52,52,52,52,52,52,52,,,52,53',
'53,52,,53,53,,53,,,,,,,,,,,,,,,,,53,,,,,,53,,53,,53,53,,53,53,53,,53',
'53,,,,,53,53,,,53,,,53,53,,,,,,,53,,,,,,53,,,,53,53,,53,53,,,,53,53',
'53,53,53,53,53,53,53,,,53,214,214,53,,214,214,,214,,,,,,,,,,,,,,,,,214',
',,,,,214,,214,,214,214,,214,214,214,,214,214,,,,,214,214,,,214,,,214',
'214,,,,,,,214,,,,,,214,,,,214,214,,214,214,,,,214,214,214,214,214,214',
'214,214,214,,,214,424,424,214,,424,424,,424,,,,,,,,,,,,,,,,,424,,,,',
',424,,424,,424,424,,424,424,424,,424,424,,,,,424,424,,,424,,,424,424',
',,,,,,424,,,,,,424,,,,424,424,,424,424,,,,424,424,424,424,424,424,424',
'424,424,,,424,193,193,424,,193,193,,193,,,,,,,,,,,,,,,,,193,,,,,,193',
',193,,193,193,,193,193,193,,193,193,193,193,,,193,193,,,193,,,193,193',
',,,,,,193,,,,,,193,,,,193,193,,193,193,,,,193,193,193,193,193,193,193',
'193,193,,,193,215,215,193,,215,215,,215,,,,,,,,,,,,,,,,,215,,,,,,215',
',215,,215,215,,215,215,215,,215,215,,,,,215,215,,,215,,,215,215,,,,',
',,215,,,,,,215,,,,215,215,,215,215,,,,215,215,215,215,215,215,215,215',
'215,,,215,216,216,215,,216,216,,216,,,,,,,,,,,,,,,,,216,,,,,,216,,216',
',216,216,,216,216,216,,216,216,,,,,216,216,,,216,,,216,216,,,,,,,216',
',,,,,216,,,,216,216,,216,216,,,,216,216,216,216,216,216,216,216,216',
',,216,159,159,216,,159,159,,159,159,,,,,,,,,,,,,,,,159,,,,,,159,,159',
',159,159,,159,159,159,,159,159,159,159,,,159,159,,,159,,,159,159,,,',
',,,159,,,,,,159,,,,159,159,,159,159,,,,159,159,159,159,159,159,159,159',
'159,,,159,406,406,159,,406,406,,406,,,,,,,,,,,,,,,,,406,,,,,,406,,406',
',406,406,,406,406,406,,406,406,406,406,,,406,406,,,406,,,406,406,,,',
',,,406,,,,,,406,,,,406,406,,406,406,,,,406,406,406,406,406,406,406,406',
'406,,,406,398,398,406,,398,398,,398,,,,,,,,,,,,,,,,,398,,,,,,398,,398',
',398,398,,398,398,398,,398,398,398,398,,,398,398,,,398,,,398,398,,,',
',,,398,,,,,,398,,,,398,398,,398,398,,,,398,398,398,398,398,398,398,398',
'398,,,398,397,397,398,,397,397,,397,,,,,,,,,,,,,,,,,397,,,,,,397,,397',
',397,397,,397,397,397,,397,397,397,397,,,397,397,,,397,,,397,397,,,',
',,,397,,,,,,397,,,,397,397,,397,397,,,,397,397,397,397,397,397,397,397',
'397,,,397,395,395,397,,395,395,,395,395,,,,,,,,,,,,,,,,395,,,,,,395',
',395,,395,395,,395,395,395,,395,395,,,,,395,395,,,395,,,395,395,,,,',
',,395,,,,,,395,,,,395,395,,395,395,,,,395,395,395,395,395,395,395,395',
'395,,,395,388,388,395,,388,388,,388,,,,,,,,,,,,,,,,,388,,,,,,388,,388',
',388,388,,388,388,388,,388,388,388,388,,,388,388,,,388,,,388,388,,,',
',,,388,,,,,,388,,,,388,388,,388,388,,,,388,388,388,388,388,388,388,388',
'388,,,388,385,385,388,,385,385,,385,,,,,,,,,,,,,,,,,385,,,,,,385,,385',
',385,385,,385,385,385,,385,385,,,,,385,385,,,385,,,385,385,,,,,,,385',
',,,,,385,,,,385,385,,385,385,,,,385,385,385,385,385,385,385,385,385',
',,385,69,69,385,,69,69,69,69,,,,,,,,,,,,,,,,,69,,,,,,69,,69,,69,69,',
'69,69,69,,69,69,69,69,,,69,69,,,69,,,69,69,,,,,,,69,,,,,,69,,,,69,69',
',69,69,,,,69,69,69,69,69,69,69,69,69,69,69,69,70,70,69,,70,70,70,70',
',,,,,,,,,,,,,,,,70,,,,,,70,,70,,70,70,,70,70,70,,70,70,70,70,,,70,70',
',,70,,,70,70,,,,,,,70,,,,,,70,,,,70,70,,70,70,,,,70,70,70,70,70,70,70',
'70,70,70,70,70,71,71,70,,71,71,,71,71,,,,,,,,,,,,,,,,71,,,,,,71,,71',
',71,71,,71,71,71,,71,71,71,71,,,71,71,,,71,,,71,71,,,,,,,71,,,,,,71',
',,,71,71,,71,71,,,,71,71,71,71,71,71,71,71,71,71,71,71,76,76,71,,76',
'76,,76,,,,,,,,,,,,,,,,,76,,,,,,76,,76,,76,76,,76,76,76,,76,76,76,76',
',,76,76,,,76,,,76,76,,,,,,,76,,,,,,76,,,,76,76,,76,76,,,,76,76,76,76',
'76,76,76,76,76,,,76,259,259,76,,259,259,,259,,,,,,,,,,,,,,,,,259,,,',
',,259,,259,,259,259,,259,259,259,,259,259,,,,,259,259,,,259,,,259,259',
',,,,,,259,,,,,,259,,,,259,259,,259,259,,,,259,259,259,259,259,259,259',
'259,259,,,259,367,367,259,,367,367,,367,,,,,,,,,,,,,,,,,367,,,,,,367',
',367,,367,367,,367,367,367,,367,367,,,,,367,367,,,367,,,367,367,,,,',
',,367,,,,,,367,,,,367,367,,367,367,,,,367,367,367,367,367,367,367,367',
'367,,,367,81,81,367,,81,81,,81,,,,,,,,,,,,,,,,,81,,,,,,81,,81,,81,81',
',81,81,81,,81,81,,,,,81,81,,,81,,,81,81,,,,,,,81,,,,,,81,,,,81,81,,81',
'81,,,,81,81,81,81,81,81,81,81,81,,,81,343,343,81,,343,343,,343,,,,,',
',,,,,,,,,,,343,,,,,,343,,343,,343,343,,343,343,343,,343,343,,,,,343',
'343,,,343,,,343,343,,,,,,,343,,,,,,343,,,,343,343,,343,343,,,,343,343',
'343,343,343,343,343,343,343,,,343,84,84,343,,84,84,,84,,,,,,,,,,,,,',
',,,84,,,,,,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84,84,,,84,,,84,84',
',,,,,,84,,,,,,84,,,,84,84,,84,84,,,,84,84,84,84,84,84,84,84,84,,,84',
'339,339,84,,339,339,,339,,,,,,,,,,,,,,,,,339,,,,,,339,,339,,339,339',
',339,339,339,,339,339,,,,,339,339,,,339,,,339,339,,,,,,,339,,,,,,339',
',,,339,339,,339,339,,,,339,339,339,339,339,339,339,339,339,,,339,86',
'86,339,,86,86,,86,,,,,,,,,,,,,,,,,86,,,,,,86,,86,,86,86,,86,86,86,,86',
'86,86,86,,,86,86,,,86,,,86,86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,,86',
'86,86,86,86,86,86,86,86,,,86,87,87,86,,87,87,,87,,,,,,,,,,,,,,,,,87',
',,,,,87,,87,,87,87,,87,87,87,,87,87,87,87,,,87,87,,,87,,,87,87,,,,,',
',87,,,,,,87,,,,87,87,,87,87,,,,87,87,87,87,87,87,87,87,87,,,87,88,88',
'87,,88,88,,88,,,,,,,,,,,,,,,,,88,,,,,,88,,88,,88,88,,88,88,88,,88,88',
'88,88,,,88,88,,,88,,,88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88',
'88,88,88,88,88,88,88,,,88,89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,,,',
',,89,,89,,89,89,,89,89,89,,89,89,89,89,,,89,89,,,89,,,89,89,,,,,,,89',
',,,,,89,,,,89,89,,89,89,,,,89,89,89,89,89,89,89,89,89,,,89,90,90,89',
',90,90,,90,,,,,,,,,,,,,,,,,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90',
'90,,,90,90,,,90,,,90,90,,,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90',
'90,90,90,90,90,90,,,90,91,91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,,,,,,91',
',91,,91,91,,91,91,91,,91,91,91,91,,,91,91,,,91,,,91,91,,,,,,,91,,,,',
',91,,,,91,91,,91,91,,,,91,91,91,91,91,91,91,91,91,,,91,92,92,91,,92',
'92,,92,,,,,,,,,,,,,,,,,92,,,,,,92,,92,,92,92,,92,92,92,,92,92,92,92',
',,92,92,,,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92',
'92,92,92,92,92,,,92,93,93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,,,,,,93,',
'93,,93,93,,93,93,93,,93,93,93,93,,,93,93,,,93,,,93,93,,,,,,,93,,,,,',
'93,,,,93,93,,93,93,,,,93,93,93,93,93,93,93,93,93,,,93,94,94,93,,94,94',
',94,,,,,,,,,,,,,,,,,94,,,,,,94,94,94,94,94,94,94,94,94,94,,94,94,,,',
',94,94,94,94,94,,,94,94,,,,,,,94,,,,,94,94,,,,94,94,,94,94,,,,94,94',
'94,94,94,94,94,94,94,94,,94,95,95,94,,95,95,,95,,,,,,,,,,,,,,,,,95,',
',,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,,,95,',
',,,,95,,,,95,95,,95,95,,,,95,95,95,95,95,95,95,95,95,,,95,96,96,95,',
'96,96,,96,,,,,,,,,,,,,,,,,96,,,,,,96,,96,,96,96,,96,96,96,,96,96,,,',
',96,96,,,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96,96,96',
'96,96,96,96,96,,,96,97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97,,,,,,97,',
'97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,',
',,97,97,,97,97,,,,97,97,97,97,97,97,97,97,97,,,97,98,98,97,,98,98,,98',
',,,,,,,,,,,,,,,,98,,,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98',
',,98,98,,,,,,,98,,,,,,98,,,,98,98,,98,98,,,,98,98,98,98,98,98,98,98',
'98,,,98,99,99,98,,99,99,,99,,,,,,,,,,,,,,,,,99,,,,,,99,,99,,99,99,,99',
'99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,,,,,,99,,,,99,99,,99,99',
',,,99,99,99,99,99,99,99,99,99,,,99,100,100,99,,100,100,,100,,,,,,,,',
',,,,,,,,100,,,,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100,100',
',,100,,,100,100,,,,,,,100,,,,,,100,,,,100,100,,100,100,,,,100,100,100',
'100,100,100,100,100,100,,,100,101,101,100,,101,101,,101,,,,,,,,,,,,',
',,,,101,,,,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101',
',,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,,,,101,101,101,101',
'101,101,101,101,101,,,101,102,102,101,,102,102,,102,,,,,,,,,,,,,,,,',
'102,,,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102,',
',102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102,,,,102,102,102,102,102',
'102,102,102,102,,,102,103,103,102,,103,103,,103,,,,,,,,,,,,,,,,,103',
',,,,,103,,103,,103,103,,103,103,103,,103,103,,,,,103,103,,,103,,,103',
'103,,,,,,,103,,,,,,103,,,,103,103,,103,103,,,,103,103,103,103,103,103',
'103,103,103,,,103,104,104,103,,104,104,,104,,,,,,,,,,,,,,,,,104,,,,',
',104,,104,,104,104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104',
',,,,,,104,,,,,,104,,,,104,104,,104,104,,,,104,104,104,104,104,104,104',
'104,104,,,104,105,105,104,,105,105,,105,,,,,,,,,,,,,,,,,105,,,,,,105',
',105,,105,105,,105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,',
',,105,,,,,,105,,,,105,105,,105,105,,,,105,105,105,105,105,105,105,105',
'105,,,105,106,106,105,,106,106,,106,,,,,,,,,,,,,,,,,106,,,,,,106,,106',
',106,106,,106,106,106,,106,106,,,,,106,106,,,106,,,106,106,,,,,,,106',
',,,,,106,,,,106,106,,106,106,,,,106,106,106,106,106,106,106,106,106',
',,106,107,107,106,,107,107,,107,,,,,,,,,,,,,,,,,107,,,,,,107,,107,,107',
'107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,,,107,,,,',
',107,,,,107,107,,107,107,,,,107,107,107,107,107,107,107,107,107,,,107',
'108,108,107,,108,108,,108,,,,,,,,,,,,,,,,,108,,,,,,108,,108,,108,108',
',108,108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,,,108,,,,,,108',
',,,108,108,,108,108,,,,108,108,108,108,108,108,108,108,108,,,108,109',
'109,108,,109,109,,109,,,,,,,,,,,,,,,,,109,,,,,,109,,109,,109,109,,109',
'109,109,,109,109,,,,,109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109',
'109,,109,109,,,,109,109,109,109,109,109,109,109,109,,,109,110,110,109',
',110,110,,110,,,,,,,,,,,,,,,,,110,,,,,,110,,110,,110,110,,110,110,110',
',110,110,,,,,110,110,,,110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,',
'110,110,,,,110,110,110,110,110,110,110,110,110,,,110,111,111,110,,111',
'111,,111,,,,,,,,,,,,,,,,,111,,,,,,111,,111,,111,111,,111,111,111,,111',
'111,,,,,111,111,,,111,,,111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111',
',,,111,111,111,111,111,111,111,111,111,,,111,112,112,111,,112,112,,112',
',,,,,,,,,,,,,,,,112,,,,,,112,,112,,112,112,,112,112,112,,112,112,,,',
',112,112,,,112,,,112,112,,,,,,,112,,,,,,112,,,,112,112,,112,112,,,,112',
'112,112,112,112,112,112,112,112,,,112,113,113,112,,113,113,,113,,,,',
',,,,,,,,,,,,113,,,,,,113,,113,,113,113,,113,113,113,,113,113,,,,,113',
'113,,,113,,,113,113,,,,,,,113,,,,,,113,,,113,113,113,,113,113,,,,113',
'113,113,113,113,113,113,113,113,,,113,114,114,113,,114,114,,114,,,,',
',,,,,,,,,,,,114,,,,,,114,,114,,114,114,,114,114,114,,114,114,,,,,114',
'114,,,114,,,114,114,,,,,,,114,,,,,,114,,,,114,114,,114,114,,,,114,114',
'114,114,114,114,114,114,114,,,114,338,338,114,,338,338,,338,,,,,,,,',
',,,,,,,,338,,,,,,338,,338,,338,338,,338,338,338,,338,338,,,,,338,338',
',,338,,,338,338,,,,,,,338,,,,,,338,,,,338,338,,338,338,,,,338,338,338',
'338,338,338,338,338,338,,,338,337,337,338,,337,337,,337,,,,,,,,,,,,',
',,,,337,,,,,,337,,337,,337,337,,337,337,337,,337,337,,,,,337,337,,,337',
',,337,337,,,,,,,337,,,,,,337,,,,337,337,,337,337,,,,337,337,337,337',
'337,337,337,337,337,,,337,118,118,337,,118,118,,118,,,,,,,,,,,,,,,,',
'118,,,,,,118,,118,,118,118,,118,118,118,,118,118,,,,,118,118,,,118,',
',118,118,,,,,,,118,,,,,,118,,,,118,118,,118,118,,,,118,118,118,118,118',
'118,118,118,118,,,118,119,119,118,,119,119,,119,,,,,,,,,,,,,,,,,119',
',,,,,119,,119,,119,119,,119,119,119,,119,119,,,,,119,119,,,119,,,119',
'119,,,,,,,119,,,,,,119,,,,119,119,,119,119,,,,119,119,119,119,119,119',
'119,119,119,,,119,336,336,119,,336,336,,336,,,,,,,,,,,,,,,,,336,,,,',
',336,,336,,336,336,,336,336,336,,336,336,,,,,336,336,,,336,,,336,336',
',,,,,,336,,,,,,336,,,,336,336,,336,336,,,,336,336,336,336,336,336,336',
'336,336,,,336,321,321,336,,321,321,,321,,,,,,,,,,,,,,,,,321,,,,,,321',
',321,,321,321,,321,321,321,,321,321,321,321,,,321,321,,,321,,,321,321',
',,,,,,321,,,,,,321,,,,321,321,,321,321,,,,321,321,321,321,321,321,321',
'321,321,,,321,122,122,321,,122,122,,122,,,,,,,,,,,,,,,,,122,,,,,,122',
',122,,122,122,,122,122,122,,122,122,,,,,122,122,,,122,,,122,122,,,,',
',,122,,,,,,122,,,,122,122,,122,122,,,,122,122,122,122,122,122,122,122',
'122,,,122,316,316,122,,316,316,,316,,,,,,,,,,,,,,,,,316,,,,,,316,,316',
',316,316,,316,316,316,,316,316,316,316,,,316,316,,,316,,,316,316,,,',
',,,316,,,,,,316,,,,316,316,,316,316,,,,316,316,316,316,316,316,316,316',
'316,316,316,316,315,315,316,,315,315,,315,315,,,,,,,,,,,,,,,,315,,,',
',,315,,315,,315,315,,315,315,315,,315,315,315,315,,,315,315,,,315,,',
'315,315,,,,,,,315,,,,,,315,,,,315,315,,315,315,,,,315,315,315,315,315',
'315,315,315,315,315,315,315,312,312,315,,312,312,,312,,,,,,,,,,,,,,',
',,312,,,,,,312,,312,,312,312,,312,312,312,,312,312,312,312,,,312,312',
',,312,,,312,312,,,,,,,312,,,,,,312,,,,312,312,,312,312,,,,312,312,312',
'312,312,312,312,312,312,312,312,312,301,301,312,,301,301,,301,,,,,,',
',,,,,,,,,,301,,,,,,301,,301,,301,301,,301,301,301,,301,301,,,,,301,301',
',,301,,,301,301,,,,,,,301,,,,,,301,,,,301,301,,301,301,,,,301,301,301',
'301,301,301,301,301,301,,,301,300,300,301,,300,300,,300,300,,,,,,,,',
',,,,,,,300,,,,,,300,,300,,300,300,,300,300,300,,300,300,300,300,,,300',
'300,,,300,,,300,300,,,,,,,300,,,,,,300,,,,300,300,,300,300,,,,300,300',
'300,300,300,300,300,300,300,,,300,299,299,300,,299,299,,299,299,,,,',
',,,,,,,,,,,299,,,,,,299,,299,,299,299,,299,299,299,,299,299,299,299',
',,299,299,,,299,,,299,299,,,,,,,299,,,,,,299,,,,299,299,,299,299,,,',
'299,299,299,299,299,299,299,299,299,,,299,285,285,299,,285,285,,285',
'285,,,,,,,,,,,,,,,,285,,,,,,285,,285,,285,285,,285,285,285,,285,285',
'285,285,,,285,285,,,285,,,285,285,,,,,,,285,,,,,,285,,,,285,285,,285',
'285,,,,285,285,285,285,285,285,285,285,285,,,285,282,282,285,,282,282',
',282,,,,,,,,,,,,,,,,,282,,,,,,282,,282,,282,282,,282,282,282,,282,282',
'282,282,,,282,282,,,282,,,282,282,,,,,,,282,,,,,,282,,,,282,282,,282',
'282,,,,282,282,282,282,282,282,282,282,282,,,282,281,281,282,,281,281',
',281,,,,,,,,,,,,,,,,,281,,,,,,281,,281,,281,281,,281,281,281,,281,281',
',,,,281,281,,,281,,,281,281,,,,,,,281,,,,,,281,,,,281,281,,281,281,',
',,281,281,281,281,281,281,281,281,281,,,281,151,151,281,,151,151,,151',
',,,,,,,,,,,,,,,,151,151,,,,,151,,151,,151,151,,151,151,151,,151,151',
'151,151,,,151,151,,,151,,,151,151,,,,,,,151,,,,,,151,,,,151,151,,151',
'151,,,,151,151,151,151,151,151,151,151,151,,,151,277,277,151,,277,277',
',277,,,,,,,,,,,,,,,,,277,,,,,,277,,277,,277,277,,277,277,277,,277,277',
'277,277,,,277,277,,,277,,,277,277,,,,,,,277,,,,,,277,,,,277,277,,277',
'277,,,,277,277,277,277,277,277,277,277,277,,,277,280,280,277,,280,280',
',280,,,,,,,,,,,,,,,,,280,,,,,,280,,280,,280,280,,280,280,280,,280,280',
',,,,280,280,,,280,,,280,280,,,,,,,280,,,,,,280,,,,280,280,,280,280,',
',,280,280,280,280,280,280,280,280,280,265,,280,,,280,,,,,,,265,265,265',
',265,,265,265,,265,265,265,265,,,,,,,,,,,,,,,,265,,,,265,265,,,265,265',
'265,265,265,265,260,265,265,,,,,,265,,,,260,260,260,,260,,260,260,,260',
'260,260,260,,,,,,,,,,,,,265,,,260,,,,260,260,,,260,260,260,260,260,260',
'270,260,260,,,,,,260,,,,270,270,270,270,270,,270,270,,270,270,270,270',
',,,,,,,,,,,,260,,,270,,,,270,270,,,270,270,270,270,270,270,,270,270',
'152,,152,,,270,,,,,,,152,152,152,,152,,152,152,,152,152,152,152,,,,',
',,,,,270,,,,,,152,,,,152,152,,,152,152,152,152,152,152,,152,152,154',
',154,,,152,,,,,,,154,154,154,,154,,154,154,,154,154,154,154,,,,,,,,',
',152,,,,,,154,,,,154,154,,,154,154,154,154,154,154,,154,154,155,,155',
',,154,,,,,,,155,155,155,,155,,155,155,,155,155,155,155,,,,,,,,,,154',
',,,,,155,,,,155,155,,,155,155,155,155,155,155,378,155,155,,,,,,155,',
',,378,378,378,,378,,378,378,,378,378,378,378,,,,,,,,,,,,,155,,,378,',
',,378,378,,,378,378,378,378,378,378,256,378,378,,,256,,,378,,,,256,256',
'256,,256,,256,256,,256,256,256,256,,,,,,,,,,,,,378,,,256,,,,256,256',
',255,256,256,256,256,256,256,,256,256,,,255,255,255,256,255,,255,255',
',255,255,255,255,,,,,,,,,,,,,,,,255,,,,256,255,,,255,255,255,255,255',
'255,419,255,255,,,,,,255,,,,419,419,419,,419,,419,419,,419,419,419,419',
',,,,,,,,,,,,255,,,419,,,,419,419,,254,419,419,419,419,419,419,,419,419',
',,254,254,254,419,254,253,254,254,,254,254,254,254,,,,,,253,253,,253',
',253,253,,253,,254,,,,419,,,,254,254,254,254,254,254,,254,254,253,,',
',,254,,252,253,253,253,253,253,253,,253,253,,,,252,252,253,252,251,252',
'252,,252,,,,,,254,,,251,251,,251,,251,251,,251,,252,,,,253,,,,252,252',
'252,252,252,252,,252,252,251,,,,,252,,250,251,251,251,251,251,251,,251',
'251,,,,250,250,251,250,249,250,250,,250,,,,,,252,,,,249,,249,,249,249',
',,,250,,,,251,248,,,250,250,250,250,250,250,,250,250,249,,248,,248,250',
'248,248,249,249,249,249,249,249,,249,249,,,,,,249,,,,,,248,,,,,,250',
',248,248,248,248,248,248,207,248,248,,,,,,248,249,,,207,207,207,207',
'207,,207,207,,207,207,207,207,,,,,,,,,,,,,248,,,207,,,,207,207,,,207',
'207,207,207,207,207,421,207,207,,,,,,207,,,,421,421,421,,421,,421,421',
',421,421,421,421,,,,,,,,,,,,,207,,,421,,,,421,421,,,421,421,421,421',
'421,421,422,421,421,,,,,,421,,,,422,422,422,,422,,422,422,,422,422,422',
'422,,,,,,,,,,,,,421,,,422,,,,422,422,,,422,422,422,422,422,422,426,422',
'422,,,,,,422,,,,426,426,426,,426,,426,426,,426,426,426,426,,,,,,,,,',
',,,422,,,426,,,,426,426,,,426,426,426,426,426,426,195,426,426,,,,,,426',
',,,195,195,195,,195,,195,195,,195,195,195,195,,,,,,,,,,,,,426,,,195',
',,,195,195,,,195,195,195,195,195,195,,195,195,,,,,,195,445,,,,,,,,,',
'195,195,445,445,445,,445,,445,445,,445,445,445,445,,,,195,,,,,,,,,,',
',445,,,,445,445,,,445,445,445,445,445,445,9,445,445,,,,,,445,,,,9,9',
'9,,9,,9,9,,9,9,9,9,,,,,,,,,,,,,445,,,9,,,,9,9,,,9,9,9,9,9,9,420,9,9',
',,,,,9,,,,420,420,420,,420,,420,420,,420,420,420,420,,,,,,,,,,,,,9,',
',420,,,,420,420,,,420,420,420,420,420,420,,420,420,,333,333,333,333',
'420,333,333,333,,333,,333,333,,,,,,,333,333,333,,,,333,,,,,,,,420,,',
',333,333,,,,,,,,,,,,333,333,333,333,333,333,333,333,333,333,399,399',
'399,399,,399,399,399,,399,,399,399,,,,,,,399,399,399,,,,399,,,,,,,,',
',,,399,399,,,,,,,,,,,,399,399,399,399,399,399,399,399,399,399,368,368',
'368,368,,368,368,368,,368,,368,368,,,,,,,368,368,368,,,,368,,,,,,,,',
',,,368,368,,,,,,,,,,,,368,368,368,368,368,368,368,368,368,368,374,374',
'374,374,,374,374,374,,374,,374,374,,,,,,,374,374,374,,,,374,,,,,,,,',
',,,374,374,,,,,,,,,,,,374,374,374,374,374,374,374,374,374,374,335,335',
'335,335,,335,335,335,,335,,335,335,,,,,,,335,335,335,,,,335,,,,,,,,',
',,,335,335,,,,,,,,,,,,335,335,335,335,335,335,335,335,335,335,264,264',
'264,264,,264,264,264,,264,,264,264,,,,,,,264,264,264,,,,264,,,,,,,,',
',,,264,264,,,,,,,,,,,,264,264,264,264,264,264,264,264,264,264' ]
        racc_action_check = arr = ::Array.new(10120, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   463,   nil,   nil,   182,   434,   nil,  1328,   436,  9641,
   642,   734,   292,   nil,   nil,   nil,    46,  1010,  1102,  1194,
  1286,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   138,  1470,   -20,   326,
   367,  1838,  1930,  2022,   664,   843,    22,   375,  1119,   574,
    18,   111,   145,   109,   107,   105,   nil,   nil,   nil,  3218,
  3310,  3402,   nil,   nil,   nil,   nil,  3494,   nil,   236,   217,
   nil,  3770,   nil,   263,  3954,   234,  4138,  4230,  4322,  4414,
  4506,  4598,  4690,  4782,  4874,  4966,  5058,  5150,  5242,  5334,
  5426,  5518,  5610,  5702,  5794,  5886,  5978,  6070,  6162,  6254,
  6346,  6438,  6530,  6622,  6714,   nil,   -33,   231,  6990,  7082,
   225,   161,  7358,   140,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   384,   nil,   nil,  1382,   248,  1658,  1566,
   193,   nil,   281,   231,   nil,   297,   312,    -7,   nil,   341,
   225,  8278,  8711,   nil,  8768,  8825,   328,   339,   480,  2574,
   353,   nil,   353,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   356,    -9,   848,   374,   204,   372,   nil,   nil,   nil,   nil,
   nil,   nil,   374,   nil,    94,   nil,   nil,   376,   nil,   190,
   nil,   nil,    64,  2298,   250,  9524,  1378,   nil,   388,   nil,
   nil,   nil,   nil,   399,   390,   437,   419,  9308,   391,   550,
    24,     9,   159,    69,  2114,  2390,  2482,   nil,   nil,    90,
    -2,    44,    67,    -1,   659,   756,   567,  1073,   751,    -9,
     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1652,  1014,
  1198,   462,   186,  1290,  1106,  1192,    94,     2,  9254,  9226,
  9209,  9162,  9145,  9098,  9081,  8980,  8933,   nil,   nil,  3586,
  8600,   340,   nil,   nil, 10028,  8546,   299,   nil,   322,   300,
  8654,   nil,   301,   nil,    96,   323,   nil,  8370,   282,   nil,
  8462,  8186,  8094,   193,   nil,  8002,   nil,   202,   nil,   nil,
   nil,   nil,   nil,   146,   106,   -24,   nil,    98,   nil,  7910,
  7818,  7726,    65,    60,   362,    12,   nil,   -12,   981,   -28,
    96,   120,  7634,   147,   nil,  7542,  7450,   nil,   nil,   nil,
   nil,  7266,   nil,   nil,   nil,   nil,   174,   nil,   nil,   nil,
   nil,   178,   196,  9728,   207,  9968,  7174,  6898,  6806,  4046,
   245,   nil,   254,  3862,   260,   nil,   nil,   nil,   nil,   nil,
   267,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   277,  3678,  9848,   286,
   nil,   390,   nil,   290,  9908,   nil,   234,     7,  8879,   306,
   313,   315,   nil,   255,   112,  3126,   nil,   nil,  3034,   nil,
   330,    73,   333,   312,    90,  2942,   nil,  2850,  2758,  9788,
   nil,   346,   nil,  1027,   nil,   nil,  2666,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -53,   124,   364,   nil,   nil,  9034,
  9695,  9362,  9416,   376,  2206,   nil,  9470,   379,   nil,   nil,
   378,  1746,   nil,   nil,   nil,   367,   382,   nil,  1654,   nil,
   nil,  1562,   nil,   nil,   nil,  9587,   -19,   nil,   918,   404,
   381,   nil,   408,   409,   nil,   nil,   410,   nil,   nil,   414,
   413,   826,   nil,   419,   nil,   nil,   422,   393,   nil,   nil,
   nil,   nil,   427,   nil,   428,   432,   nil,   nil,   458,   nil,
   366,   274,   nil,   nil,   447,   448,   nil,   nil,   nil,    90,
   nil,   nil,   nil,   456,   nil,   464,   nil,   465,   nil,   nil,
   nil,   nil,   438,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -286,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -286,  -286,  -186,   -33,   -34,   -35,   -36,  -286,  -286,  -286,
  -286,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -87,   -88,  -286,  -286,   -95,
   -99,  -286,  -286,  -286,  -286,  -286,  -286,  -286,  -286,  -286,
  -236,  -259,  -208,  -209,  -210,  -211,  -205,  -206,  -207,  -286,
  -286,  -286,  -232,  -233,  -234,  -235,  -286,  -238,  -286,  -251,
  -254,  -286,  -260,  -286,  -286,    -7,  -286,  -286,  -286,  -286,
  -286,  -286,  -286,  -286,  -136,  -286,  -286,  -286,  -286,  -286,
  -286,  -286,  -286,  -286,  -286,  -286,  -286,  -286,  -286,  -286,
  -286,  -286,  -286,  -286,  -286,   -93,  -286,  -131,  -285,  -285,
   -22,   -23,  -286,  -285,  -155,  -179,  -180,  -181,  -182,  -183,
  -184,  -185,  -186,  -286,  -152,  -153,   -47,  -186,   -48,   -55,
  -286,   -14,  -261,   -90,   -94,  -200,  -286,  -259,   -96,  -286,
  -286,  -286,  -286,  -107,  -286,  -286,  -285,  -285,  -286,  -286,
  -261,  -166,  -168,  -169,  -170,  -171,  -172,  -174,  -175,  -236,
  -285,  -226,  -228,  -231,  -227,  -261,  -213,  -222,  -223,  -224,
  -229,  -230,  -261,  -215,  -286,  -218,  -219,  -286,  -237,  -286,
  -242,  -245,  -286,  -249,  -286,  -286,  -286,   507,    -6,    -9,
   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -286,  -261,  -286,
   -86,   -87,   -88,  -279,  -272,  -278,  -266,  -137,  -140,  -208,
  -209,  -210,  -211,  -286,  -269,  -283,  -186,  -275,  -281,  -206,
  -207,  -265,  -270,  -271,  -273,  -274,  -276,  -284,   -37,   -38,
   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,   -49,   -50,
   -51,   -52,   -53,   -54,   -56,   -57,  -286,   -58,  -125,  -286,
   -61,  -261,  -100,  -101,  -136,  -135,  -286,  -134,  -286,  -263,
  -286,   -28,  -285,  -187,  -286,  -286,   -59,  -262,  -286,   -92,
  -286,  -286,  -249,  -286,  -102,  -286,  -105,  -261,  -190,  -192,
  -193,  -194,  -195,  -197,  -286,  -286,  -259,  -286,   -98,  -286,
  -286,  -286,  -286,  -286,  -286,  -286,  -163,  -285,  -262,  -286,
  -286,  -286,  -262,  -286,  -216,  -286,  -286,  -239,  -240,  -241,
  -243,  -286,  -246,  -247,  -248,  -250,  -261,  -252,  -255,  -257,
  -258,    -8,  -286,  -136,  -286,  -262,  -286,  -286,  -286,  -286,
  -261,  -127,  -286,  -262,  -261,  -139,  -141,  -142,  -143,  -144,
  -286,  -266,  -267,  -268,  -269,  -272,  -275,  -277,  -278,  -279,
  -280,  -281,  -282,  -283,  -132,  -133,  -286,  -264,  -136,  -286,
  -158,  -286,  -188,  -261,  -136,   -15,   -89,  -286,  -202,  -286,
  -286,  -286,  -104,  -286,  -262,  -286,  -198,  -199,  -286,   -97,
  -286,  -110,  -286,  -116,  -286,  -286,  -120,  -285,  -285,  -136,
  -162,  -286,  -176,  -286,  -167,  -173,  -285,  -212,  -225,  -214,
  -217,  -220,  -221,  -244,  -286,  -286,  -261,   -26,  -138,  -147,
  -145,  -146,  -129,  -286,  -262,   -60,   -62,  -286,   -25,   -29,
  -261,  -285,  -159,  -160,  -161,  -286,  -261,   -91,  -286,  -201,
  -203,  -249,  -103,  -106,  -191,  -196,  -110,  -109,  -286,  -286,
  -116,  -115,  -286,  -286,  -119,  -121,  -286,  -156,  -157,  -286,
  -261,  -286,  -177,  -286,  -253,  -256,  -286,   -30,  -126,  -128,
  -130,   -27,  -286,  -189,  -286,  -286,  -108,  -111,  -286,  -114,
  -286,  -285,  -148,  -149,  -286,  -286,  -165,  -178,   -24,   -31,
  -154,  -151,  -204,  -286,  -113,  -286,  -118,  -286,  -123,  -124,
  -150,  -164,  -263,  -112,  -117,  -122,   -32 ]

racc_goto_table = [
     2,   140,   136,   138,   139,   269,   124,   145,   148,   258,
   165,   163,   179,   179,   366,   328,   324,   188,   261,   142,
   146,   287,   404,   447,   267,   267,   396,   272,   141,   432,
   120,   121,   133,   208,    85,   340,   152,   154,   155,   266,
   268,   175,   182,   451,   466,   429,   369,   418,   156,   157,
   177,   177,   177,   170,   401,   497,   405,   190,   444,   387,
   302,   303,   386,   395,   477,   326,   195,   199,   200,   201,
   202,   284,   158,   411,   310,   257,   322,   323,   476,   207,
   238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   260,
   479,     3,   279,   265,   265,   379,   320,   270,   278,   145,
   203,   204,   205,   206,   198,   456,   459,   462,   321,   319,
   455,   191,   193,   297,   463,     1,   307,   275,   nil,   nil,
   145,   124,   141,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   311,   nil,   146,   nil,   373,   nil,   nil,   313,   472,
   nil,   nil,   304,   145,   nil,   341,   nil,   nil,   nil,   305,
   nil,   nil,   nil,   nil,   nil,   nil,   157,   nil,   170,   nil,
   nil,   nil,   145,   nil,   334,   nil,   nil,   331,   370,   165,
   163,   nil,   nil,   nil,   377,   146,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   325,   138,   nil,   332,   nil,   nil,   152,
   154,   155,   nil,   344,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   402,   nil,   nil,   nil,   nil,   156,   157,
   124,   nil,   170,   nil,   nil,   nil,   nil,   342,   nil,   nil,
   nil,   nil,   nil,   145,   nil,   465,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   256,   nil,   nil,   506,   nil,   nil,
   nil,   nil,   nil,   383,   nil,   408,   nil,   nil,   375,   412,
   165,   163,   413,   nil,   475,   260,   378,   nil,   nil,   nil,
   nil,   nil,   416,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   325,   nil,   nil,   381,   260,   nil,   nil,   nil,
   nil,   nil,   414,   177,   nil,   nil,   177,   177,   nil,   390,
   392,   nil,   190,   458,   458,   nil,   423,   430,   nil,   nil,
   427,   nil,   458,   436,   nil,   nil,   nil,   nil,   nil,   nil,
   469,   419,   420,   421,   422,   nil,   nil,   nil,   426,   nil,
   nil,   nil,   nil,   nil,   nil,   437,   nil,   458,   460,   435,
   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   270,   nil,   nil,   165,   163,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   433,   nil,   nil,   nil,   375,
   445,   nil,   502,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   260,   nil,   467,   nil,   nil,   nil,   nil,   498,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   471,   nil,   nil,   nil,
   nil,   nil,   474,   nil,   nil,   nil,   nil,   nil,   nil,   256,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   426,   nil,   nil,   484,   nil,   nil,   nil,
   nil,   nil,   nil,   152,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   325,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   485,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   270,   nil,   nil,   nil,   493,   nil,
   495,   499 ]

racc_goto_check = [
     2,     6,    10,    10,    10,    13,    65,    43,    45,    58,
    41,    42,    87,    87,    14,   100,    83,    93,    22,     8,
    82,    50,    74,    52,    57,    57,    55,    66,     6,    71,
     9,     9,    68,    11,     5,    59,    10,    10,    10,    61,
    61,    84,    84,    53,    12,    16,    70,    62,    65,    65,
     6,     6,     6,    65,    73,    56,    76,     6,    77,    78,
    66,    66,    80,    54,    51,    50,    10,     6,     6,     6,
     6,    49,    68,    86,    66,    21,    89,    90,    52,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    53,     3,    45,    10,    10,    83,    94,    10,    15,    43,
     9,     9,     9,     9,     5,    67,    67,    74,    95,    97,
    55,    98,    99,     8,    67,     1,    15,    65,   nil,   nil,
    43,    65,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    15,   nil,    82,   nil,    50,   nil,   nil,    15,    67,
   nil,   nil,    65,    43,   nil,    58,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,    65,   nil,    65,   nil,
   nil,   nil,    43,   nil,    15,   nil,   nil,     6,    57,    41,
    42,   nil,   nil,   nil,    22,    82,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,    10,   nil,     2,   nil,   nil,    10,
    10,    10,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    57,   nil,   nil,   nil,   nil,    65,    65,
    65,   nil,    65,   nil,   nil,   nil,   nil,    15,   nil,   nil,
   nil,   nil,   nil,    43,   nil,   100,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,    14,   nil,   nil,
   nil,   nil,   nil,    15,   nil,    87,   nil,   nil,     6,    87,
    41,    42,    93,   nil,    83,    10,    10,   nil,   nil,   nil,
   nil,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,   nil,     2,    10,   nil,   nil,   nil,
   nil,   nil,    15,     6,   nil,   nil,     6,     6,   nil,     2,
     2,   nil,     6,    57,    57,   nil,    15,    11,   nil,   nil,
    15,   nil,    57,    11,   nil,   nil,   nil,   nil,   nil,   nil,
    58,    10,    10,    10,    10,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,   nil,   nil,    45,   nil,    57,    11,    15,
   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,    41,    42,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    65,   nil,   nil,   nil,     6,
    10,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,    15,   nil,   nil,   nil,   nil,    57,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,     2,   nil,
     2,     2 ]

racc_goto_pointer = [
   nil,   125,     0,   101,   nil,    30,   -19,   nil,   -28,    20,
   -15,   -61,  -372,  -117,  -255,   -34,  -322,   nil,   nil,   nil,
   nil,   -38,   -96,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -48,   -47,   -41,   nil,   -41,   nil,   nil,   nil,   -78,
  -129,  -384,  -368,  -350,  -238,  -275,  -426,   -94,  -104,  -224,
   nil,   -79,  -288,   nil,   nil,    -6,   -96,  -282,    16,   nil,
  -226,  -342,   nil,  -253,  -286,   nil,  -253,  -326,  -236,   nil,
  -232,   nil,   -28,  -177,   -28,   nil,  -242,   -57,   nil,  -116,
  -115,   nil,   nil,   -59,   -83,   -71,   nil,   -70,    43,    43,
  -180 ]

racc_goto_default = [
   nil,   nil,   457,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   271,    13,    14,    15,
    16,   nil,   394,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    47,   nil,    49,    50,   149,   nil,
   nil,   153,   nil,   nil,   nil,   nil,   nil,   273,   nil,   nil,
   117,   nil,   217,   223,   218,    56,   nil,   nil,   nil,   123,
   nil,   nil,   160,   nil,   161,   162,   166,   288,   289,   290,
   291,   292,   295,   nil,   nil,   184,   186,   187,   178,    72,
    73,    74,    76,   nil,   nil,   nil,   189,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 100, :_reduce_1,
  1, 100, :_reduce_2,
  0, 100, :_reduce_3,
  1, 101, :_reduce_4,
  1, 103, :_reduce_5,
  3, 103, :_reduce_6,
  2, 103, :_reduce_7,
  1, 104, :_reduce_8,
  3, 104, :_reduce_9,
  1, 105, :_reduce_none,
  3, 105, :_reduce_11,
  3, 105, :_reduce_12,
  3, 105, :_reduce_13,
  1, 107, :_reduce_14,
  3, 107, :_reduce_15,
  1, 106, :_reduce_none,
  3, 106, :_reduce_17,
  3, 106, :_reduce_18,
  3, 106, :_reduce_19,
  3, 106, :_reduce_20,
  1, 108, :_reduce_none,
  2, 108, :_reduce_22,
  2, 108, :_reduce_23,
  7, 108, :_reduce_24,
  5, 108, :_reduce_25,
  5, 108, :_reduce_26,
  4, 115, :_reduce_27,
  1, 112, :_reduce_28,
  3, 112, :_reduce_29,
  1, 111, :_reduce_30,
  2, 111, :_reduce_31,
  4, 111, :_reduce_32,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  3, 109, :_reduce_37,
  3, 109, :_reduce_38,
  3, 109, :_reduce_39,
  3, 109, :_reduce_40,
  3, 109, :_reduce_41,
  3, 109, :_reduce_42,
  3, 109, :_reduce_43,
  3, 109, :_reduce_44,
  3, 109, :_reduce_45,
  3, 109, :_reduce_46,
  2, 109, :_reduce_47,
  2, 109, :_reduce_48,
  3, 109, :_reduce_49,
  3, 109, :_reduce_50,
  3, 109, :_reduce_51,
  3, 109, :_reduce_52,
  3, 109, :_reduce_53,
  3, 109, :_reduce_54,
  2, 109, :_reduce_55,
  3, 109, :_reduce_56,
  3, 109, :_reduce_57,
  3, 109, :_reduce_58,
  3, 109, :_reduce_59,
  5, 119, :_reduce_60,
  1, 121, :_reduce_61,
  3, 121, :_reduce_62,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_84,
  1, 116, :_reduce_85,
  1, 116, :_reduce_86,
  1, 116, :_reduce_87,
  1, 116, :_reduce_88,
  4, 118, :_reduce_89,
  2, 118, :_reduce_90,
  5, 118, :_reduce_91,
  3, 118, :_reduce_92,
  2, 143, :_reduce_93,
  2, 143, :_reduce_94,
  1, 123, :_reduce_95,
  2, 123, :_reduce_96,
  4, 145, :_reduce_97,
  3, 145, :_reduce_98,
  1, 145, :_reduce_99,
  3, 146, :_reduce_100,
  3, 146, :_reduce_101,
  2, 144, :_reduce_102,
  3, 148, :_reduce_103,
  2, 148, :_reduce_104,
  2, 147, :_reduce_105,
  4, 147, :_reduce_106,
  2, 126, :_reduce_107,
  5, 150, :_reduce_108,
  4, 150, :_reduce_109,
  0, 151, :_reduce_none,
  2, 151, :_reduce_111,
  4, 151, :_reduce_112,
  3, 151, :_reduce_113,
  6, 127, :_reduce_114,
  5, 127, :_reduce_115,
  0, 152, :_reduce_none,
  4, 152, :_reduce_117,
  3, 152, :_reduce_118,
  5, 125, :_reduce_119,
  1, 153, :_reduce_120,
  2, 153, :_reduce_121,
  5, 154, :_reduce_122,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 120, :_reduce_none,
  4, 120, :_reduce_126,
  1, 158, :_reduce_127,
  3, 158, :_reduce_128,
  3, 157, :_reduce_129,
  6, 124, :_reduce_130,
  2, 124, :_reduce_131,
  3, 159, :_reduce_132,
  3, 159, :_reduce_133,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  0, 110, :_reduce_136,
  1, 110, :_reduce_137,
  3, 110, :_reduce_138,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 161, :_reduce_145,
  3, 161, :_reduce_146,
  3, 161, :_reduce_147,
  6, 128, :_reduce_148,
  6, 129, :_reduce_149,
  7, 117, :_reduce_150,
  7, 117, :_reduce_151,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  7, 130, :_reduce_154,
  1, 168, :_reduce_155,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 169, :_reduce_none,
  2, 169, :_reduce_159,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  4, 132, :_reduce_162,
  3, 132, :_reduce_163,
  7, 131, :_reduce_164,
  6, 131, :_reduce_165,
  1, 171, :_reduce_166,
  3, 171, :_reduce_167,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_170,
  1, 173, :_reduce_none,
  1, 174, :_reduce_172,
  3, 174, :_reduce_173,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 172, :_reduce_none,
  2, 172, :_reduce_177,
  6, 134, :_reduce_178,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_186,
  1, 165, :_reduce_187,
  2, 165, :_reduce_188,
  4, 165, :_reduce_189,
  1, 149, :_reduce_190,
  3, 149, :_reduce_191,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  3, 179, :_reduce_196,
  1, 179, :_reduce_197,
  2, 180, :_reduce_198,
  2, 178, :_reduce_199,
  1, 181, :_reduce_200,
  4, 181, :_reduce_201,
  4, 135, :_reduce_202,
  5, 136, :_reduce_203,
  7, 136, :_reduce_204,
  1, 122, :_reduce_205,
  1, 137, :_reduce_206,
  1, 137, :_reduce_207,
  1, 137, :_reduce_208,
  1, 137, :_reduce_209,
  1, 137, :_reduce_210,
  1, 137, :_reduce_211,
  4, 138, :_reduce_212,
  2, 138, :_reduce_213,
  4, 138, :_reduce_214,
  2, 138, :_reduce_215,
  3, 139, :_reduce_216,
  4, 139, :_reduce_217,
  2, 139, :_reduce_218,
  1, 184, :_reduce_219,
  3, 184, :_reduce_220,
  3, 185, :_reduce_221,
  1, 186, :_reduce_none,
  1, 186, :_reduce_223,
  1, 183, :_reduce_224,
  3, 183, :_reduce_225,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 188, :_reduce_235,
  1, 188, :_reduce_236,
  2, 189, :_reduce_237,
  1, 191, :_reduce_238,
  1, 193, :_reduce_239,
  1, 194, :_reduce_240,
  2, 192, :_reduce_241,
  1, 195, :_reduce_242,
  1, 196, :_reduce_243,
  2, 196, :_reduce_244,
  2, 190, :_reduce_245,
  2, 197, :_reduce_246,
  2, 197, :_reduce_247,
  3, 102, :_reduce_248,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  0, 198, :_reduce_251,
  2, 198, :_reduce_252,
  4, 198, :_reduce_253,
  1, 133, :_reduce_254,
  3, 133, :_reduce_255,
  5, 133, :_reduce_256,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 142, :_reduce_259,
  1, 140, :_reduce_260,
  0, 114, :_reduce_none,
  1, 114, :_reduce_262,
  0, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  0, 156, :_reduce_285 ]

racc_reduce_n = 286

racc_shift_n = 507

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :TYPE => 83,
  :PRIVATE => 84,
  :ATTR => 85,
  :APPLICATION_R => 86,
  :CONSUMES_R => 87,
  :PRODUCES_R => 88,
  :SITE_R => 89,
  :APPLICATION => 90,
  :PRODUCES => 91,
  :CONSUMES => 92,
  :SITE => 93,
  :LOW => 94,
  :HIGH => 95,
  :LISTSTART => 96,
  :SPLAT => 97,
  :MODULO => 98 }

racc_nt_base = 99

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "SITE_R",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hashpair",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_59(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_60(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_61(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_62(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_84(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_85(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_86(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_87(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_88(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_89(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_90(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_91(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_92(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_93(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_94(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_95(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_96(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_97(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_98(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_99(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_100(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_101(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 320)
  def _reduce_102(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_103(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_104(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 330)
  def _reduce_105(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_106(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_107(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_108(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_109(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 110 omitted

module_eval(<<'.,.,', 'egrammar.ra', 358)
  def _reduce_111(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_112(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_113(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_114(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_115(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 116 omitted

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_117(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_118(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 398)
  def _reduce_119(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 404)
  def _reduce_120(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 405)
  def _reduce_121(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 410)
  def _reduce_122(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_126(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_127(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_128(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_129(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_130(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 451)
  def _reduce_131(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_132(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_133(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_136(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_137(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_138(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_145(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 491)
  def _reduce_146(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 495)
  def _reduce_147(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 504)
  def _reduce_148(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 515)
  def _reduce_149(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 521)
  def _reduce_150(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 528)
  def _reduce_151(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 545)
  def _reduce_154(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_155(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 564)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_162(val, _values, result)
        result = add_definition(Factory.SITE(val[2]))
    loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_163(val, _values, result)
        result = add_definition(Factory.SITE(nil))
    loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_164(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_165(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 609)
  def _reduce_166(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_167(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_170(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 171 omitted

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_172(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_173(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_177(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_178(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_186(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_187(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_188(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_189(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_190(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_191(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_196(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_197(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_198(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_199(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_200(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_201(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_202(val, _values, result)
          result = add_definition(Factory.TYPE_ASSIGNMENT(val[1], val[3]))
      loc(result, val[0], val[3])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_203(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], nil, val[3]))
        loc(result, val[0], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_204(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5]))
        loc(result, val[0], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_205(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_206(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_207(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_208(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_209(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 719)
  def _reduce_210(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_211(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_212(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_213(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_214(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 729)
  def _reduce_215(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 732)
  def _reduce_216(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_217(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_218(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_219(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 738)
  def _reduce_220(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 741)
  def _reduce_221(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 222 omitted

module_eval(<<'.,.,', 'egrammar.ra', 745)
  def _reduce_223(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 748)
  def _reduce_224(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 749)
  def _reduce_225(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

module_eval(<<'.,.,', 'egrammar.ra', 766)
  def _reduce_235(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 767)
  def _reduce_236(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 769)
  def _reduce_237(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 770)
  def _reduce_238(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 771)
  def _reduce_239(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 772)
  def _reduce_240(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 773)
  def _reduce_241(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 774)
  def _reduce_242(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 777)
  def _reduce_243(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 778)
  def _reduce_244(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 781)
  def _reduce_245(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 784)
  def _reduce_246(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 785)
  def _reduce_247(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 788)
  def _reduce_248(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 249 omitted

# reduce 250 omitted

module_eval(<<'.,.,', 'egrammar.ra', 795)
  def _reduce_251(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 796)
  def _reduce_252(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 797)
  def _reduce_253(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 800)
  def _reduce_254(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 801)
  def _reduce_255(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 802)
  def _reduce_256(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 257 omitted

# reduce 258 omitted

module_eval(<<'.,.,', 'egrammar.ra', 808)
  def _reduce_259(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 811)
  def _reduce_260(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 261 omitted

module_eval(<<'.,.,', 'egrammar.ra', 817)
  def _reduce_262(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

module_eval(<<'.,.,', 'egrammar.ra', 846)
  def _reduce_285(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
