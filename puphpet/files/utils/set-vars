#!/usr/bin/env bash
# run as root
# echo
# echo "  ---%%%%%%%%%%%%%%%%%%%%%%%%%%---"
# echo "----%%%%% SET VARIABLES %%%%%----"
# echo "  ---%%%%%%%%%%%%%%%%%%%%%%%%%%---"
# echo

# set -x

read_params(){
    hiera --hash --format json --config /vagrant/puphpet/puppet/hiera.yaml $1 | jq ".${2}" | tr -d '"'
}

export SRC_HOME="$(read_params  histograph directories.src_home)"
export DEV_HOME="$(read_params  histograph directories.dev_home)"
export UPLOADS_DIR="$(read_params  histograph directories.uploads_dir)"
export NEO_PLUGIN_DIR="$(read_params  histograph directories.neo_plugin_dir)"
export RUN_DIR="$(read_params  histograph directories.run_dir)"
export LOG_DIR="$(read_params  histograph directories.log_dir)"

export MYUSER="$(read_params  histograph users.system_user)"
export APIUSER="$(read_params  histograph users.api_user)"
export APIPASSWORD="$(read_params  histograph users.api_password)"

export APIBASEPORT="$(read_params  histograph api.base_port)"
export APIPROTOCOL="$(read_params  histograph api.protocol)"
export APIPROXY="$(read_params  histograph api.proxy)"
# export BASEHOST=localhost

if [ "${1} " != " " ]
then
  export APIBASEHOST="api.${1}"
else
  echo "ERROR: name of host not provided"
  exit 1
fi

# export APIBASEURL="http://${APIBASEHOST}:${APIBASEPORT}"
if [ "$APIPROXY " == "1 " ]
then
  export APIBASEURL="${APIPROTOCOL}://${APIBASEHOST}"
else
  export APIBASEURL="${APIPROTOCOL}://${APIBASEHOST}:${APIBASEPORT}"
fi


export COREBATCHSIZE="$(read_params  histograph core.batchSize)"
export COREBATCHTIMEOUT="$(read_params  histograph core.batchTimeout)"

export MY_BRANCH="$(read_params  histograph git.branch)"
export MY_TAG="$(read_params  histograph git.tag)"
# export MY_TAG="v0.5.1"

export REDISMAXQUEUESIZE="$(read_params  histograph redis.maxQueueSize)"

export DATA_REP_TODOWNLOAD="$(read_params  histograph data.repositories.toDownload | tr -d '[],"\n')"
# export DATA_REP_TODOWNLOAD="geonames nwb tgn bag"

export DATA_REP_ONDISK="$(read_params  histograph data.repositories.onDisk | tr -d '[],"\n')"
# export DATA_REP_ONDISK="bag-geonames-tgn cshapes geonames-tgn whosonfirst"

export EL_DATA_REP="$(read_params  histograph data.repositories.erfLoc | tr -d '[],"\n')"
# export EL_DATA_REP="Departementen atlas-verstedelijking gemeentegeschiedenis kloeke poorterboeken voc-opvarenden carnaval ilvb pleiades verdwenen-dorpen"

export BAG_PASSWORD="$(read_params  postgresql settings.server.postgres_password)"
export BAG_NAME="$(read_params  postgresql databases.bag.dbname)"

export PAGE_SIZE="$(read_params histograph es.page_size)"
export SHARD_NR="$(read_params histograph es.shard_nr)"
export REPLICA_NR="$(read_params histograph es.replica_nr)"
export REFRESH_INT="$(read_params histograph es.refresh_interval)"
export ES_TIMEOUT="$(read_params histograph es.timeout)"
export ES_PRECISION="$(read_params histograph es.precision)"
export DISTANCE_ERROR_PCT="$(read_params histograph es.distance_error_pct)"
export ES_RETRYTIME="$(read_params histograph es.retrytime)"
export ES_INSTNAME="$(read_params elastic_search instances.histograph_instance.name)"

export NPM_INSTALL="npm prune && npm install 1>/dev/null"

export DIFF_TOOL_PATH="/usr/local/bin/hashed-diff"

export PIPO_EXPORTS="$(read_params nginx vhosts.importeren_histograph.www_root)/$(read_params  histograph directories.pipo_exports)"

export STATS_ACTIVE="$(read_params  histograph stats.enabled)"
export STATS_CRONEXPR="$(read_params  histograph stats.cronExpression)"

if [ -d ${DEV_HOME} ]
then
  # we are in developer mode, change variables
  SRC_HOME="${DEV_HOME}"
  MYUSER=vagrant
fi


install_service()
{

FOREVER_CONFIG="${SRC_HOME}/${MY_MODULE}.forever.json"

echo "${SRC_HOME}/${MY_MODULE}.forever.json"

cat > ${FOREVER_CONFIG} << FOREVER
{
    "uid": "${MY_MODULE}",
    "append": true,
    "watch": false,
    "script": "index.js",
    "sourceDir": "${SRC_HOME}/${MY_MODULE}",
    "pidFile": "${RUN_DIR}/${MY_MODULE}.pid",
    "logFile": "${LOG_DIR}/${MY_MODULE}.log",
    "args": ["--config", "${SRC_HOME}/config.yaml"]
}
FOREVER

chown ${MYUSER}:${MYUSER} ${FOREVER_CONFIG}

rm -rf /etc/init.d/histograph-${MY_MODULE}

cat > /etc/init.d/histograph-${MY_MODULE} << INITD
#!/bin/bash
### BEGIN INIT INFO
# If you wish the Daemon to be lauched at boot / stopped at shutdown :
#
#    On Debian-based distributions:
#      INSTALL : update-rc.d scriptname defaults
#      (UNINSTALL : update-rc.d -f  scriptname remove)
#
#    On RedHat-based distributions (CentOS, OpenSUSE...):
#      INSTALL : chkconfig --level 35 scriptname on
#      (UNINSTALL : chkconfig --level 35 scriptname off)
#
# chkconfig:         2345 90 60
# Provides:          ${SRC_HOME}/${MY_MODULE}/index.js
# Required-Start:    \$remote_fs \$syslog
# Required-Stop:     \$remote_fs \$syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Histograph ${MY_MODULE}
# Description:       histograph-${MY_MODULE}
### END INIT INFO

FOREVER_CONFIG="${FOREVER_CONFIG}"
FOREVER_UID=${MY_MODULE}
FOREVER_USER=${MYUSER}

case "\$1" in
    start)
        if [ ! -d ${RUN_DIR} ]
        then
          mkdir -p ${RUN_DIR}
        fi
        chown \$FOREVER_USER:\$FOREVER_USER ${RUN_DIR}

        su "\$FOREVER_USER" -c "NODE_ENV=production forever start --uid \$FOREVER_UID \$FOREVER_CONFIG"
        RETVAL=\$?
        ;;
    stop)
        su "\$FOREVER_USER" -c "NODE_ENV=production forever stop \$FOREVER_UID"
        RETVAL=\$?
        ;;
    restart)
        if [ ! -d ${RUN_DIR} ]
        then
          mkdir -p ${RUN_DIR}
        fi
        chown \$FOREVER_USER:\$FOREVER_USER ${RUN_DIR}

        su "\$FOREVER_USER" -c "NODE_ENV=production forever restart \$FOREVER_UID"
        RETVAL=\$?
        ;;
    status)
        su "\$FOREVER_USER" -c "forever list"
        RETVAL=\$?
        ;;
    *)
        echo "Usage:  {start|stop|status|restart}"
        exit 1
        ;;
esac
exit \$RETVAL
INITD

# start on startup
chmod +x /etc/init.d/histograph-${MY_MODULE}
update-rc.d histograph-${MY_MODULE} defaults

service histograph-${MY_MODULE} restart
service histograph-${MY_MODULE} status

}

install_source()
{
  cd ${SRC_HOME}

  if [ "${MY_DEST} " == " " ]
  then
    export MY_PLACE="${MY_MODULE}"
  else
    export MY_PLACE="${MY_DEST}"
  fi

  if [ ! -d ${SRC_HOME}/${MY_PLACE} ]
  then
    # clone master branch
    sudo su $MYUSER -c "git clone ${MY_REPO}/${MY_MODULE} ${MY_PLACE}"
    if [ "${MY_REPO} " == "https://github.com/histograph " ]
    then
      if [ ! "${MY_BRANCH} " == " " ]
      then
        sudo su $MYUSER -c "git  -C ${SRC_HOME}/${MY_PLACE}/ checkout ${MY_BRANCH}"
      elif [ ! "${MY_TAG} " == " " ]
      then
        sudo su $MYUSER -c "git  -C ${SRC_HOME}/${MY_PLACE}/ checkout tags/${MY_TAG}"
      fi
    fi
  else
    sudo su $MYUSER -c "git -C ${SRC_HOME}/${MY_PLACE}/ pull"
  fi

}

install_nodecode()
{
  install_source
  # install node dependencies
  cd ${SRC_HOME}/${MY_PLACE}

  for i in $(find node_modules/ -type d -name "histograph-*")
  do
    rm -rf ${i}
  done
  
  if [ -d node_modules/graphmalizer-core ]
  then
    rm -rf node_modules/graphmalizer-core
  fi

  sudo su $MYUSER -c "${NPM_INSTALL}"

}

install_jekyllcode()
{
  install_source
  # install node dependencies
  cd ${SRC_HOME}/${MY_PLACE}
  sudo su $MYUSER -c "${NPM_INSTALL}"

}

install_phpcode()
{
  install_source
  # install php dependencies
  cd ${SRC_HOME}/${MY_PLACE}
  sudo su $MYUSER -c "composer install" 2> /dev/null

}

install_data()
{
  export MY_MODULE=data
  export MY_REPO="https://github.com/histograph"

  install_nodecode

  export MY_MODULE=e_l_data
  # export MY_DEST=e_l_data
  # export MY_REPO="https://github.com/histograph"

  install_source
}

clean_webdir()
{
  EXISTSTORAGE="NO"

  if [ -d ${MY_WEBDIR}/app/storage ]
  then
    EXISTSTORAGE="YES"
    mv ${MY_WEBDIR}/app/storage /tmp
  fi

  find ${MY_WEBDIR} -mindepth 1 -type d -exec rm -rf {} \; 2>/dev/null

  find ${MY_WEBDIR} -type f -exec rm -rf {} \;

  if [ "${EXISTSTORAGE} " == "YES " ]
  then
    mkdir -p ${MY_WEBDIR}/app/ 
    mv /tmp/storage ${MY_WEBDIR}/app/storage
  fi

}

set_CLIENT_webdirperm()
{
  chown -R www-data:www-data ${MY_WEBDIR}

  chmod -R u=rX ${MY_WEBDIR}
  chmod -R go-rwxX ${MY_WEBDIR}

  service nginx restart
}

set_PHP_webdirperm()
{
  chown -R www-user:www-data ${MY_WEBDIR}

  chmod -R u=rxX ${MY_WEBDIR}
  chmod -R g=rX ${MY_WEBDIR}
  chmod -R o-rwxX ${MY_WEBDIR}

  service nginx restart
}

# set +x
